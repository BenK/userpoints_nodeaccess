<?php
// $Id: userpoints_nodeaccess.module,v 1.1.2.10 2009/11/19 08:34:08 betz Exp $


/**
 * @file
 * This module enables you to sell access to a single node for a specific category and amount of userpoints.
 */



/**
 * Implementation of hook_perm().
 */
function userpoints_nodeaccess_perm() {
  return array('administer userpoints nodeaccess', 'buy access to a node');
}



/**
 * Implementation of hook_menu().
 */
function userpoints_nodeaccess_menu() {
  $items = array();
  $items['upaccess'] = array(
    'title' => 'Access granted',
    'page callback' => 'upaccess',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK
  );
  $items['admin/settings/userpoints_nodeaccess'] = array(
    'title' =>  'Userpoints Node Access',
    'description' => 'Settings about the userpoints nodeaccess module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('userpoints_nodeaccess_admin'),
    'access arguments' => array('administer userpoints nodeaccess'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['up/emptybuys'] = array(
    'page callback' => 'upemptybuys',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK
  );
  $items['up/emptypoints'] = array(
    'page callback' => 'upemptypoints',
    'access callback' => TRUE,
    'page arguments' => array(1),
    'type' => MENU_CALLBACK
  );
  return $items;
}



/**
 * Implementation of hook_help().
 */
function userpoints_nodeaccess_help($path, $arg) {
  switch ($path) {
    case 'admin/settings/userpoints_nodeaccess':
      return t('The userpoints nodeaccess module gives you the possibility to sell access to specific nodes.');
  }
}



/**
 * Implementation of hook_menu_alter().
 */
function userpoints_nodeaccess_menu_alter(&$items) {
  // per unauth pages, replace the callback function
  if (function_exists('_userpoints_nodeaccess_node_access')) {
    // note: access callback function was previously: node_access
    $items['node/%node']['access callback'] = '_userpoints_nodeaccess_node_access';
  }
}



/**
 * Our own access callback _userpoints_nodeaccess_node_access.
 */
function _userpoints_nodeaccess_node_access($op, $node) {
  global $user;
  $nid = $node->nid;
  $uid = $user->uid;

  if ($uid == 1) {
    return node_access($op, $node);
  }

  // Check if the node has assigned points
  if ($result = db_result(db_query("SELECT count(*) as count FROM {userpoints_nodeaccess_points} WHERE nid = %d AND points > 0", $nid))) {
    // Check if the user has access to the node
    if ($result = db_result(db_query("SELECT count(*) as count FROM {userpoints_nodeaccess} WHERE nid = %d AND uid = %d", $nid, $uid))) {
      return TRUE;
    }
    else { // User has no access
      return FALSE;
    }
  }
  else { // Node has no assigned points, let the standard drupal node access decide whether the user has access or not
    return node_access($op, $node);
  }
}



/**
 * Page Callback for the upaccess page.
 */
function upaccess() {
  global $user;
  $args = func_get_args();
  $nid = $args[0];
  $uid = $user->uid;
  $node = node_load($nid);

  if (user_access('buy access to a node')) {
    //check if user already has access to the node or not
    if (!($result = db_result(db_query("SELECT * from {userpoints_nodeaccess} WHERE uid = %d AND nid = %d", $uid, $nid)))) { // User hasn't access already

      $result = db_query("SELECT points, tid FROM {userpoints_nodeaccess_points} WHERE nid = %d", $nid);
      while ($row = db_fetch_object($result)) {
        $nodepoints = $row->points;
        $tid = $row->tid;
      }

      $currentpoints = userpoints_get_current_points($uid, $tid);

      if (($currentpoints - $nodepoints) >= 0) {
        $date = date("U");
        $result = db_query("INSERT INTO {userpoints_nodeaccess} (nid, uid, timestamp) VALUES('%d', '%d', '%s')", $nid, $uid, $date);
        $params = array(
          'uid' => $uid,
          'points' => -$nodepoints,
          'tid' => $tid,
          'operation' => 'Substract',
          'description' => t('User bought access to') . ' \'' . $node->title . '\'',
        );
        userpoints_userpointsapi($params);
      }
      else {
        drupal_set_message(t("You don't have enough credits to buy access to this page.") . $currentpoints);
      }
        drupal_goto('node/' . $nid);
    }

    else { // User already got access to the nodes
      if (variable_get('upnodeaccess_messagealreadybought', '0') == 1) {
        drupal_set_message(t("You already got access."));
      }
      drupal_goto('node/' . $nid);
    }
  }
  else {
    drupal_set_message(t("You don't have the right permissions to buy access."));
    drupal_goto('node/' . $nid);
  }
}



/**
 * Page Callback to empty the userpoints_nodeaccess table.
 */
function upemptybuys() {
  db_query("DELETE FROM {userpoints_nodeaccess}");
  drupal_set_message(t("Userpoints Nodeaccess buys db emptied successfully."));
  drupal_goto('admin/settings/userpoints_nodeaccess');
}



/**
 * Page Callback to empty the userpoints_nodeaccess_points table.
 */
function upemptypoints() {
  db_query("DELETE FROM {userpoints_nodeaccess_points}");
  drupal_set_message(t("Userpoints Nodeaccess Points db emptied successfully."));
  drupal_goto('admin/settings/userpoints_nodeaccess');
}



/**
 * Page Callback for the settings page.
 */
function userpoints_nodeaccess_admin() {
  $form = array();

  $form['upnodeaccess_emptybuys'] = array(
    '#type' => 'submit',
    '#value' => t('Empty Nodeaccess Buys'),
    '#submit' => array('upemptybuys'),
  );
  $form['upnodeaccess_emptypoints'] = array(
    '#type' => 'submit',
    '#value' => t('Empty Nodeaccess Points'),
    '#submit' => array('upemptypoints'),
  );
  $form['upnodeaccess_messagealreadybought'] = array(
    '#type' => 'checkbox',
    '#title' => t('Show a message when the user already bought access to the node and tries to buy it again.'),
    '#default_value' => variable_get('upnodeaccess_messagealreadybought', 1) ,
  );
  $form['upnodeaccess_defcategory'] = array(
    '#type' => 'select',
    '#title' => t('Default Points Category'),
    '#default_value' => variable_get('upnodeaccess_defcategory', 0),
    '#options' => userpoints_get_categories(),
    '#description' => t('Choose a default !Points category.', userpoints_translation()),
  );
  return system_settings_form($form);
}




/**
 * Implementation of hook_form_alter.
 */
function userpoints_nodeaccess_form_alter(&$form, $form_state, $form_id) {
  if (isset($form['type']) && isset($form['#node']) && $form['type']['#value'] .'_node_form' == $form_id) {

    $form['userpoints_nodeaccess'] = array(
      '#type' => 'fieldset',
      '#title' => t('Userpoints Nodeaccess Options'),
      '#collapsible' => TRUE,
      '#collapsed' => empty($form['#node']->points_price),
      '#access' => user_access('administer userpoints nodeaccess'),
      '#weight' => 30,
    );
    $form['userpoints_nodeaccess']['points_price'] = array(
      '#type' => 'textfield',
      '#title' => t('!Points', userpoints_translation()),
      '#default_value' => $form['#node']->points_price,
      '#maxlength' => 128,
      '#description' => t('Optionally set a price in !points that this node costs to get access to. When leaving empty, the standard drupal node access decides who can access the node or not.', userpoints_translation()),
    );
    $form['userpoints_nodeaccess']['points_category'] = array(
      '#type' => 'select',
      '#title' => t('Points Category'),
      '#default_value' => (empty($form['#node']->points_category)) ? variable_get('upnodeaccess_defcategory', 0) : $form['#node']->points_category,
      '#options' => userpoints_get_categories(),
      '#description' => t('Choose a !Points category from which this node can be bought.', userpoints_translation()),
    );
    $form['#submit'][] = 'userpoints_nodeaccess_node_form_submit';
  }
}




/**
 * Implementation of hook_nodeapi().
 */
function userpoints_nodeaccess_nodeapi(&$node, $op) {
  switch ($op) {
    case 'insert':
    case 'update':

      if (($node->points_price == '') || ($node->points_price == 0)) {
        db_query("DELETE FROM {userpoints_nodeaccess_points} WHERE nid = %d", $node->nid);
      }
      else {
        if (!($result = db_result(db_query("SELECT * from {userpoints_nodeaccess_points} WHERE nid = %d", $node->nid)))) {
          $result = db_query("INSERT INTO {userpoints_nodeaccess_points} (nid, points, tid) VALUES(%d, %d, %d)", $node->nid, $node->points_price, $node->points_category);
        }
        else {
          $result = db_query("UPDATE {userpoints_nodeaccess_points} SET points = %d, tid = %d WHERE nid = %d", $node->points_price, $node->points_category, $node->nid);
        }
      }
      break;
    case 'prepare':

      $result = db_query("SELECT points, tid FROM {userpoints_nodeaccess_points} WHERE nid = %d", $node->nid);
      while ($row = db_fetch_object($result)) {
        $node->points_price = $row->points;
        $node->points_category = $row->tid;
      }
      break;
  }
}



/**
 * Implementation of hook_forms().
 *
 * Register an "buy access" form for each product to prevent id collisions.
 */
function userpoints_nodeaccess_forms($form_id, $args) {
  $forms = array();
  if (is_object($args[0]) && isset($args[0]->type)) {
    $product = $args[0];
    $forms['userpoints_nodeaccess_buy_access_form_'. $product->nid] = array('callback' => 'userpoints_nodeaccess_buy_access_form');
  }
  return $forms;
}



/**
 *   userpoints_nodeaccess_buy_access_form()
 */
function userpoints_nodeaccess_buy_access_form($form_state, $node) {
  $form = array();
  $form['#submit'][] = 'userpoints_nodeaccess_buy_access_form_submit';
  $form['nid'] = array('#type' => 'hidden', '#value' => $node->nid);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' =>  t('Buy Access'),
    '#id' => 'edit-submit-'. $node->nid,
    '#attributes' => array(
      'class' => 'list-buy-access',
    ),
  );

  uc_form_alter($form, $form_state, __FUNCTION__);

  return $form;
}



/**
 * @see userpoints_nodeaccess_buy_access_form()
 */
function userpoints_nodeaccess_buy_access_form_submit($form, &$form_state) {
  drupal_goto('upaccess/'.$form_state['values']['nid']);
}
