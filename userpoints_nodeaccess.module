<?php
// $Id: userpoints_nodeaccess.module,v 1.1.2.10 2009/11/19 08:34:08 betz Exp $

/**
 * @file
 * This module enables you to sell access to a single node for a specific
 * category and amount of userpoints.
 */

/**
 * Implements hook_permission().
 */
function userpoints_nodeaccess_permission() {
  return array(
    'trade userpoints for node access' => array(
      'title' => t('Trade Userpoints for node access'),
      'description' => t('Allows a user to gain access to a node by trading in Userpoints that the user has accumulated.'),
    ),
    'set required userpoints for any node' => array(
      'title' => t('Set required Userpoints for any node'),
      'description' => t('Allows a user to determine the number and category of Userpoints required to access a node'),
    ),
    'set required userpoints for own node' => array(
      'title' => t('Set required Userpoints for own node'),
      'description' => t('Allows the author of a node to determine the number and category of Userpoints required to access that node.'),
    )
  );
}

/**
 * Implements hook_theme().
 */
function userpoints_nodeaccess_theme() {
  return array(
    'userpoints_nodeaccess_node_points_information' => array(
      'variables' => array('category' => NULL, 'points' => NULL, 'price' => NULL),
      'file' => 'userpoints_nodeaccess.theme.inc',
    ),
  );
}

function userpoints_nodeaccess_is_protected($nid) {
  return db_query("SELECT 1 FROM {userpoints_nodeaccess_points} WHERE nid = :nid AND points > 0", array(':nid' => $nid))->fetchField();
}

function userpoints_nodeaccess_has_access($nid, $uid) {
  return db_query("SELECT 1 FROM {userpoints_nodeaccess} WHERE nid = :nid AND uid = :uid", array(':nid' => $nid, ':uid' => $uid))->fetchField();
}

/**
 * Page Callback for the settings page.
 */
function userpoints_nodeaccess_userpoints($op, $points = NULL) {
  if ($op == 'setting') {
    $form['userpoints_nodeaccess'] = array(
      '#type' => 'fieldset',
      '#title' => t('Userpoints nodeaccess settings'),
      '#collapsed' => TRUE,
      '#collapsible' => TRUE,
    );

    $form['userpoints_nodeaccess']['userpoints_nodeaccess_messagealreadybought'] = array(
      '#type' => 'checkbox',
      '#title' => t('Show a message when the user already bought access to the node.'),
      '#default_value' => variable_get('userpoints_nodeaccess_messagealreadybought', 0) ,
    );
    $form['userpoints_nodeaccess']['userpoints_nodeaccess_default_category'] = array(
      '#type' => 'select',
      '#title' => t('Default Points Category'),
      '#default_value' => variable_get('userpoints_nodeaccess_default_category', 0),
      '#options' => userpoints_get_categories(),
      '#description' => t('Choose a default !Points category.', userpoints_translation()),
    );
    return $form;
  }
}

/**
 * Implements hook_form_alter.
 */
function userpoints_nodeaccess_form_alter(&$form, $form_state, $form_id) {
  global $user;

  if (!empty($form['#node_edit_form'])) {
    $form['userpoints_nodeaccess'] = array(
      '#type' => 'fieldset',
      '#title' => t('Userpoints Nodeaccess Options'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
      // Check if user either has permission for all nodes or for own nodes and
      // is the author.
      '#access' => user_access('set required userpoints for any node') || (user_access('set required userpoints for own node') && $form['#node']->uid == $user->uid),
      '#weight' => 30,
      '#group' => 'additional_settings',
      '#attached' => array(
        'js' => array(
          'userpoints_nodeaccess' => drupal_get_path('module', 'userpoints_nodeaccess') . '/userpoints_nodeaccess.js',
        ),
      ),
      '#attributes' => array('class' => array('userpoints-nodeaccess-form')),
    );
    $form['userpoints_nodeaccess']['points_price'] = array(
      '#type' => 'textfield',
      '#title' => t('!Points', userpoints_translation()),
      '#default_value' => $form['#node']->points_price,
      '#maxlength' => 128,
      '#description' => t('Set a price in !points that is required to access this node. All users have access if this field is left empty.', userpoints_translation()),
    );
    $form['userpoints_nodeaccess']['points_category'] = array(
      '#type' => 'select',
      '#title' => t('Points Category'),
      '#default_value' => $form['#node']->points_category,
      '#options' => userpoints_get_categories(),
      '#description' => t('Choose the !points category that shall be used when users trade in their !points.', userpoints_translation()),
    );
  }
}

/**
 * Implements hook_node_insert().
 */
function userpoints_nodeaccess_node_insert($node) {
  userpoints_nodeaccess_update_node($node);
}

/**
 * Implements hook_node_update().
 */
function userpoints_nodeaccess_node_update($node) {
  userpoints_nodeaccess_update_node($node);
}

function userpoints_nodeaccess_update_node($node) {
  // Only change eventually existing information if the user has permission
  // to do so.
  if (!(user_access('set required userpoints for any node') || (user_access('set required userpoints for own node') && $form['#node']->uid == $user->uid))) {
    return;
  }
  if (empty($node->points_price)) {
    db_delete('userpoints_nodeaccess_points')
      ->condition('nid', $node->nid)
      ->execute();
  }
  else {
    db_merge('userpoints_nodeaccess_points')
      ->key(array(
        'nid' => $node->nid,
      ))
      ->fields(array(
        'points' => $node->points_price,
        'tid' => $node->points_category,
      ))
      ->execute();
  }
}

function userpoints_nodeaccess_node_load($nodes) {

  $points = db_query("SELECT nid, points, tid FROM {userpoints_nodeaccess_points} WHERE nid IN (:nids)", array(':nids' => array_keys($nodes)))->fetchAllAssoc('nid');

  foreach ($nodes as $node) {
    // Default values.
    $node->points_price = 0;
    $node->points_category = variable_get('userpoints_nodeaccess_default_category', 0);

    if (isset($points[$node->nid])) {
      $node->points_price = $points[$node->nid]->points;
      $node->points_category = $points[$node->nid]->tid;
    }
  }
}

function userpoints_nodeaccess_node_prepare($node) {
  // Default values if this is a new node.
  if (empty($node->nid)) {
    $node->points_price = 0;
    $node->points_category = variable_get('userpoints_nodeaccess_default_category', 0);
  }
}

function userpoints_nodeaccess_node_view_alter(&$build) {
  global $user;

  // Don't limit access to users with bypass permission or the author.
  if (user_access('bypass node access') || $build['#node']->uid == $user->uid) {
    return;
  }

  if (userpoints_nodeaccess_is_protected($build['#node']->nid)) {
    $current_points = userpoints_get_current_points($user->uid, $build['#node']->points_category);
    $categories = userpoints_get_categories();
    $category = $categories[$build['#node']->points_category];

    if (!userpoints_nodeaccess_has_access($build['#node']->nid, $user->uid)) {
      // Re-populate $build with a different view mode.
      // @todo: Figure out if it is possible to change the view mode before
      // rendering to avoid building it twice.
      $node = $build['#node'];
      node_build_content($node, 'userpoints_nodeaccess');
      $build = $node->content;
      // We don't need duplicate rendering info in node->content.
      unset($node->content);

      $build += array(
        '#theme' => 'node',
        '#node' => $node,
        '#view_mode' => 'userpoints_nodeaccess',
      );

      if (user_access('trade userpoints for node access')) {
        $build['trade'] = drupal_get_form('userpoints_nodeaccess_trade_access_form', $build['#node'], $current_points, $category);
      }
      else {
        $build['trade'] = array('#markup' => t('You do not have access to this content.'));
      }
    }
    else {
      // User already got access to the node.
      if (variable_get('userpoints_nodeaccess_messagealreadybought', 0)) {
        $args = array_merge(userpoints_translation(), array(
          '@category' => $category,
          '@points' => $current_points,
          '@price' => $build['#node']->points_price,
        ));
        drupal_set_message(t('By trading in @price !points in category @category, you now have full access to this content. Enjoy!', $args));
      }
    }
  }
}

/**
 * Displays a form which can be used to get access to a node.
 */
function userpoints_nodeaccess_trade_access_form($form, &$form_state, $node, $current_points, $category) {
  global $user;

  $form['information'] = array(
    '#markup' => theme('userpoints_nodeaccess_node_points_information', array('category' => $category, 'points' => $current_points, 'price' => $node->points_price))
  );

  if ($current_points > $node->points_price) {
    $form['nid'] = array(
      '#type' => 'value',
      '#value' => $node->nid
    );
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' =>  t('Get access'),
      '#id' => 'edit-submit-'. $node->nid,
      '#attributes' => array(
        'class' => array('list-get-access'),
      ),
    );
  }

  return $form;
}

/**
 * Submit callback for the trade access form.
 *
 * @see userpoints_nodeaccess_trade_access_form()
 */
function userpoints_nodeaccess_trade_access_form_submit($form, &$form_state) {
  global $user;
  $uid = $user->uid;
  $nid = $form_state['values']['nid'];

  // Check if user already has access to the node or not.
  $has_access = db_query("SELECT count(*) as count FROM {userpoints_nodeaccess} WHERE nid = :nid AND uid = :uid", array(':nid' => $nid, ':uid' => $uid))->fetchField();
  if (!$has_access) {
    // User does not already have access.
    $row = db_query("SELECT points, tid FROM {userpoints_nodeaccess_points} WHERE nid = :nid", array(':nid' => $nid))->fetchObject();
    if (!$row) {
      return;
    }
    $nodepoints = $row->points;
    $tid = $row->tid;

    $currentpoints = userpoints_get_current_points($uid, $tid);
    if ($currentpoints >= $nodepoints) {
      db_insert('userpoints_nodeaccess')
        ->fields(array(
          'nid' => $nid,
          'uid' => $uid,
          'timestamp' => REQUEST_TIME,
        ))
        ->execute();
      $params = array(
        'uid' => $uid,
        'points' => -$nodepoints,
        'tid' => $tid,
        'operation' => 'Substract',
        'description' => t('User bought access to @node', array('@node' => node_load($nid)->title)),
      );
      userpoints_userpointsapi($params);
    }
    else {
      drupal_set_message(t("You don't have enough !points to get access.", userpoints_translation()));
    }
  }
}

/**
 * Implements hook_entity_info().
 */
function userpoints_nodeaccess_entity_info() {
  $return['node']['view modes'] = array(
    'userpoints_nodeaccess' => array(
      'label' => t('Userpoints node access denied'),
      'custom settings' => TRUE,
    ),
  );
  return $return;
}